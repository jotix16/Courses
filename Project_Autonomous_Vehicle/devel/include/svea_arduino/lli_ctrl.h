// Generated by gencpp from file svea_arduino/lli_ctrl.msg
// DO NOT EDIT!


#ifndef SVEA_ARDUINO_MESSAGE_LLI_CTRL_H
#define SVEA_ARDUINO_MESSAGE_LLI_CTRL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace svea_arduino
{
template <class ContainerAllocator>
struct lli_ctrl_
{
  typedef lli_ctrl_<ContainerAllocator> Type;

  lli_ctrl_()
    : steering(0)
    , velocity(0)
    , trans_diff(0)
    , ctrl(0)  {
    }
  lli_ctrl_(const ContainerAllocator& _alloc)
    : steering(0)
    , velocity(0)
    , trans_diff(0)
    , ctrl(0)  {
  (void)_alloc;
    }



   typedef int8_t _steering_type;
  _steering_type steering;

   typedef int8_t _velocity_type;
  _velocity_type velocity;

   typedef int8_t _trans_diff_type;
  _trans_diff_type trans_diff;

   typedef int8_t _ctrl_type;
  _ctrl_type ctrl;





  typedef boost::shared_ptr< ::svea_arduino::lli_ctrl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::svea_arduino::lli_ctrl_<ContainerAllocator> const> ConstPtr;

}; // struct lli_ctrl_

typedef ::svea_arduino::lli_ctrl_<std::allocator<void> > lli_ctrl;

typedef boost::shared_ptr< ::svea_arduino::lli_ctrl > lli_ctrlPtr;
typedef boost::shared_ptr< ::svea_arduino::lli_ctrl const> lli_ctrlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::svea_arduino::lli_ctrl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::svea_arduino::lli_ctrl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace svea_arduino

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'svea_arduino': ['/home/aljanabim/ros/svea_starter/src/svea_arduino/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::svea_arduino::lli_ctrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::svea_arduino::lli_ctrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svea_arduino::lli_ctrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svea_arduino::lli_ctrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svea_arduino::lli_ctrl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svea_arduino::lli_ctrl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::svea_arduino::lli_ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4c1d25e08fe7c24fca84a1ec3ad2a96";
  }

  static const char* value(const ::svea_arduino::lli_ctrl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4c1d25e08fe7c24ULL;
  static const uint64_t static_value2 = 0xfca84a1ec3ad2a96ULL;
};

template<class ContainerAllocator>
struct DataType< ::svea_arduino::lli_ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "svea_arduino/lli_ctrl";
  }

  static const char* value(const ::svea_arduino::lli_ctrl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::svea_arduino::lli_ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 steering\n\
int8 velocity\n\
int8 trans_diff\n\
int8 ctrl\n\
";
  }

  static const char* value(const ::svea_arduino::lli_ctrl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::svea_arduino::lli_ctrl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.steering);
      stream.next(m.velocity);
      stream.next(m.trans_diff);
      stream.next(m.ctrl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lli_ctrl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::svea_arduino::lli_ctrl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::svea_arduino::lli_ctrl_<ContainerAllocator>& v)
  {
    s << indent << "steering: ";
    Printer<int8_t>::stream(s, indent + "  ", v.steering);
    s << indent << "velocity: ";
    Printer<int8_t>::stream(s, indent + "  ", v.velocity);
    s << indent << "trans_diff: ";
    Printer<int8_t>::stream(s, indent + "  ", v.trans_diff);
    s << indent << "ctrl: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ctrl);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SVEA_ARDUINO_MESSAGE_LLI_CTRL_H
