// Generated by gencpp from file svea_arduino/lli_encoder.msg
// DO NOT EDIT!


#ifndef SVEA_ARDUINO_MESSAGE_LLI_ENCODER_H
#define SVEA_ARDUINO_MESSAGE_LLI_ENCODER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace svea_arduino
{
template <class ContainerAllocator>
struct lli_encoder_
{
  typedef lli_encoder_<ContainerAllocator> Type;

  lli_encoder_()
    : right_ticks(0)
    , left_ticks(0)
    , time_delta(0)  {
    }
  lli_encoder_(const ContainerAllocator& _alloc)
    : right_ticks(0)
    , left_ticks(0)
    , time_delta(0)  {
  (void)_alloc;
    }



   typedef uint8_t _right_ticks_type;
  _right_ticks_type right_ticks;

   typedef uint8_t _left_ticks_type;
  _left_ticks_type left_ticks;

   typedef uint16_t _time_delta_type;
  _time_delta_type time_delta;





  typedef boost::shared_ptr< ::svea_arduino::lli_encoder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::svea_arduino::lli_encoder_<ContainerAllocator> const> ConstPtr;

}; // struct lli_encoder_

typedef ::svea_arduino::lli_encoder_<std::allocator<void> > lli_encoder;

typedef boost::shared_ptr< ::svea_arduino::lli_encoder > lli_encoderPtr;
typedef boost::shared_ptr< ::svea_arduino::lli_encoder const> lli_encoderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::svea_arduino::lli_encoder_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::svea_arduino::lli_encoder_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace svea_arduino

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'svea_arduino': ['/home/aljanabim/ros/svea_starter/src/svea_arduino/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::svea_arduino::lli_encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::svea_arduino::lli_encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svea_arduino::lli_encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svea_arduino::lli_encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svea_arduino::lli_encoder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svea_arduino::lli_encoder_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::svea_arduino::lli_encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41aecfbb5a17be4edf75b1acdf69d991";
  }

  static const char* value(const ::svea_arduino::lli_encoder_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41aecfbb5a17be4eULL;
  static const uint64_t static_value2 = 0xdf75b1acdf69d991ULL;
};

template<class ContainerAllocator>
struct DataType< ::svea_arduino::lli_encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "svea_arduino/lli_encoder";
  }

  static const char* value(const ::svea_arduino::lli_encoder_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::svea_arduino::lli_encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 right_ticks\n\
uint8 left_ticks\n\
uint16 time_delta\n\
";
  }

  static const char* value(const ::svea_arduino::lli_encoder_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::svea_arduino::lli_encoder_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.right_ticks);
      stream.next(m.left_ticks);
      stream.next(m.time_delta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lli_encoder_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::svea_arduino::lli_encoder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::svea_arduino::lli_encoder_<ContainerAllocator>& v)
  {
    s << indent << "right_ticks: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_ticks);
    s << indent << "left_ticks: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_ticks);
    s << indent << "time_delta: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.time_delta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SVEA_ARDUINO_MESSAGE_LLI_ENCODER_H
